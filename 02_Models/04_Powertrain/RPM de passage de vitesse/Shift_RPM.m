%% Calcul de RPM optimal pour le passage de vitesse d'Optimus à
% partir de la courbe de couple réailsé sur banc à Chambéry le 14/05/2019

% Réalisé à partir de la méthode décrite dans le livre "Analysis Technique
% for racecar data acquisition

%% Paramètres voiture
nb_gear = 6; % nombre de vitesse considérée
%Ratio total: moteur vers roue, pour chaque vitesse

% Transmission
primaire = 36/76; % Rapport primaire

% Etagement origine
K(1) = 12/32; % Rapport de 1ere
K(2) = 16/31; % Rapport de 2eme
K(3) = 18/29; % Rapport de 3eme
K(4) = 22/31; % Rapport de 4eme
K(5) = 23/29; % Rapport de 5eme
K(6) = 24/28; % Rapport de 6eme

final = 1/3.2; % Rapport final (pignon couronne)

Gear_ratio = primaire*K*final;

% Courbe Puissance / rpm
HP =[26.7693245794283 27.3863579411617 27.9279953724586 28.3587054578259 27.9467458755348 27.1107728161179 26.3501956871375 26.3810788686747 27.3395604670977 28.1767152809101 29.0138700947226 29.9581969016077 31.0339610584874 31.9402721395279 32.8065453816469 33.5592126345397 33.4180323760838 32.5566122053492 31.6709266776926 31.3003284992460 31.9548313536812 32.7173701949582 33.5584247982760 34.4371773668120 35.3471282513908 36.2004599698180 37.0760349320904 37.8877111211347 38.7539843632536 39.6249373527790 40.3717115904193 40.9027548071301 40.9341737173266 41.0291924659313 41.6790573231710 42.3612990527740 43.0495591723884 43.8339368348953 44.6237742027097 45.3717538298334 46.2561394276550 47.0308976093820 47.9129433335004 48.6396907733173 49.4938313369752 50.2382924873453 51.0870946724803 51.8051065838053 52.5997970230041 53.4660702651230 54.3074715163969 55.0425096198288 55.8938192251792 56.8146895203729 57.6227259058788 58.4598807196913 59.2970355335037 60.1402566865467 60.9422267328221 61.8145663141716 62.6186162481832 63.4776098832256 64.2699171177267 65.0479251240415 65.8596013130858 66.5931871716716 67.2053359485701 67.6321856362452 68.0788887977657 68.6281682408205 69.2833328777172 69.9566965323055 70.6300601868937 71.1164702961049 71.4572882637835 71.6061893176237 71.7054566868505 71.7087655991580 71.7319279853109 71.8709023022284 72.0429657422215 72.1323063745256 72.1918667960617 72.2183380945221 72.2812074283658 72.4797421668193 72.7212927652711 73.0554929083346 73.3963108760132 73.6014634390818 73.7272021067691 73.8198516513807 73.8198516513807 73.8397051252261 74.0779468113704 74.3823667436658 74.6470797282705 74.8720857651846 75.0573848544079 75.1026066559445 75.0176779067172 74.9514996605660 74.7408322436514 74.4187647790489 74.0746378990628 73.7801447036900 73.7470555806144 73.5981545267743 73.3301326298620 72.9099007668020 72.3870926222076 71.8973736006889 71.3083872099434 70.6598403976618 69.9480106374981 69.1973011577206 68.4632741108271 67.6807163500894 66.8002305417732 66.0670701147697 65.3339096877663 64.5656511552148 63.8129917806846 62.9459385806646 62.0487270084699 61.0587004460482 60.1766547219299 59.4285884328171 58.7267996458344 57.8514268948696 57.1374187674368 56.1122074374781 54.8443425382983 52.8060525568419 53.7281361198817 50.6343031123139 51.6534481030422 48.5086578459380 49.8092809769625 46.4485290432516 47.3948779632136 45.1503324479193 43.9127992448922 41.4256001603769 43.2091038941513 38.1012462620492 40.6612414173307 39.8847499958235 ];


RPM_HP = 1.0e+04 * [   0.5005    0.5041    0.5127    0.5214    0.5301    0.5372    0.5443    0.5522    0.5577    0.5608    0.5636    0.5668    0.5699    0.5735    0.5774    0.5837    0.5916    0.5979    0.6038    0.6113    0.6176    0.6212    0.6243    0.6275    0.6306    0.6334    0.6361    0.6397    0.6436    0.6484    0.6555    0.6641    0.6736    0.6823    0.6911    0.6961    0.7008    0.7055    0.7103    0.7150    0.7201    0.7252    0.7300    0.7343    0.7382    0.7422    0.7461    0.7497   0.7532    0.7572    0.7607    0.7647    0.7678    0.7714    0.7753    0.7792    0.7828    0.7867    0.7911    0.7954   0.8005    0.8061    0.8120    0.8191    0.8269    0.8352    0.8439    0.8526    0.8612    0.8699    0.8786    0.8873   0.8959    0.9046    0.9133    0.9220    0.9306    0.9393    0.9480    0.9567    0.9653    0.9740    0.9827    0.9913   1.0000    1.0087    1.0174    1.0260    1.0347    1.0434    1.0521    1.0607    1.0694    1.0781    1.0867    1.0954  1.1041    1.1128    1.1214    1.1301    1.1388    1.1475    1.1561    1.1648    1.1735    1.1822    1.1908    1.1995   1.2082    1.2168    1.2255    1.2342    1.2429,1.2515,1.2590,1.2649,1.2701,1.2748,1.2799,1.2862,1.2925,1.2977,1.3016,1.3048,1.3083,1.3123,1.3166,1.3217,1.3257,1.3280,1.3288,1.3304,1.3313,1.3322,1.3324,1.3330,1.3333,1.3337,1.3343,1.3346,1.3347,1.3350,1.3354,1.3362,1.3363,1.3370,1.3371,1.3375];


%% Algo
pas = 50; % précision demandée

RPM_opt =[];
for gear=1:nb_gear-1
    C=[];
    for RPM = 9000:pas:14000
        [a drop] = cost(gear,RPM,HP,RPM_HP,Gear_ratio);
        C = [C a];
        if C(end)==max(C)
            RPM_opt(gear) = RPM;
            Drop(gear) = drop;
        end
    end
end

%% Results
disp( "Rapport de passage optimaux");
disp(RPM_opt);
% disp("Chute de RPM");
% disp(Drop);
plot(RPM_HP,HP,"DisplayName",'Motor Power (HP)')
hold on
for gear=1:nb_gear-1
    plot(RPM_opt(gear),interp1(RPM_HP,HP,RPM_opt(gear)),'o',"DisplayName",['Optimal RPM for ',int2str(gear),' to ',int2str(gear+1),' gearshift'])
end
xlabel('Motor rpm')
ylabel('Motor power (HP)')
legend("Location",'southeast')
hold off
%% Functions
function [C drop] = cost(gear,RPM_opt,HP,RPM_HP,gear_ratio)
    RPM_Low = gear_ratio(gear)/gear_ratio(gear+1)*RPM_opt;
    i_low = approxUp(RPM_HP,RPM_Low);
    i_high = approxDown(RPM_HP,RPM_opt);
    if i_low ~= i_high
        X=[ RPM_Low RPM_HP(i_low:i_high) RPM_opt];
        Y=[ interp1(RPM_HP,HP,RPM_Low) HP(i_low:i_high) interp1(RPM_HP,HP,RPM_opt)];
        plot(X,Y)
        C=trapz(X,Y)/(RPM_opt-RPM_Low);
    else
        C=0;
    end
    drop = RPM_Low;
end
function i = approxUp(L,val)
%cette fonction cherche l'indice i tel que val soit compris entre L(i-1) et
%L(i)
i=1;
while val>L(i)
    i=i+1;
    if i>length(L)
        i=i-1;
        break
    end
end
end
function i = approxDown(L,val)
%cette fonction cherche l'indice i tel que val soit compris entre L(i) et
%L(i+1)
i=1;
while val>L(i)
    i=i+1;
    if i>length(L)
        i=i-1;
        break
    end
end
i=i-1;
end